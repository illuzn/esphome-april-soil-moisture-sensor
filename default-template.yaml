esphome:
  name: $device_name

esp32:
  board: esp32-s2-saola-1
  variant: esp32s2
  framework:
    type: esp-idf

# Enable logging
logger:
  level: verbose

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Fallback Hotspot"
    password: !secret fallback_password

# Set up the minimum and maximum values for calculating moisture %
globals:
   - id: minimumRawValue
     type: float
     restore_value: no
     initial_value: $minimum_raw_value
   - id: maximumRawValue
     type: float
     restore_value: no
     initial_value: $maximum_raw_value

sensor:
  - platform: adc
    pin: 7
    attenuation: 11dB
    raw: true
    id: "vbatt"
    name: "Battery Voltage"
    update_interval: 30s
    disabled_by_default: true
    device_class: "voltage"
    state_class: "measurement"
    icon: "mdi:battery-outline"
    accuracy_decimals: 2
    entity_category: "diagnostic"

# derive battery percentage 3300mV=0%, 3950mV=100%
  - platform: template
    lambda: |-
      float x = id(vbatt).state;
      if (x < 3300) {
        x = 3300;
      }
      if (x > 3950) {
        x = 3950;
      }
      float y = (x - 3300) / 650 * 100;
      return y;
    name: "Battery Percentage"
    update_interval: 5s
    unit_of_measurement: "%"
    device_class: "battery"
    state_class: "measurement"
    icon: "mdi:battery"
    accuracy_decimals: 0

  - platform: adc
    pin: 9
    raw: true
    id: rMoisture
    name: "Raw Moisture reading"
    update_interval: never
    unit_of_measurement: raw
    disabled_by_default: true
    state_class: "measurement"
    icon: "mdi:water-alert"
    entity_category: "diagnostic"

#derive moisture level 3800=100% 6800=0%
  - platform: template
    name: "Moisture Level (Instant)"
    id: "iMoisture"
    unit_of_measurement: "%"
    update_interval: never
    state_class: "measurement"
    disabled_by_default: true
    icon: "mdi:water-percent"
    accuracy_decimals: 0
    lambda: |-
      float x = id(rMoisture).state;
      if (x < id(minimumRawValue)) {
        x = id(minimumRawValue);
      }
      if (x > id(maximumRawValue)) {
        x = id(maximumRawValue);
      }
      float z = id(minimumRawValue) - id(maximumRawValue)
      float y = (x - id(minimumRawValue)) / z * 100;
      return y;

# average over 5 readings to smooth
  - platform: template
    name: "Moisture Level"
    id: "aMoisture"
    unit_of_measurement: "%"
    update_interval: 5s
    state_class: "Measurement"
    icon: "mdi:water-percent"
    accuracy_decimals: 0
    lambda: |-
      return id(iMoisture).state;
    filters:
    - quantile:
        window_size: 5
        send_every: 5
        send_first_at: 5
        quantile: 0.9
        

output:
  - platform: ledc
    pin: 17
    frequency: 1500000Hz
    id: moisture_gen

interval:
  - interval: 1500ms
    then:
      - output.turn_on: moisture_gen
      - output.set_level:
          id: moisture_gen
          level: 34%
      - delay: 500ms
      - component.update: rMoisture
      - component.update: iMoisture
      - component.update: aMoisture
      - output.turn_off: moisture_gen
      
deep_sleep:
  run_duration:
    default: $run_duration
  sleep_duration: $sleep_duration
  wakeup_pin: 2
